性能的宏观分析：
PHP作为解释性语言性能有其天然的劣势
PHP作为动态类型语言在性能上也有提升的空间
当下主流PHP版本本身语言引擎性能

一、PHP 作为解释性语言的性能分析与提升
PHP 作为一门脚本语言，也是解释性语言，是其天然性能受限的原因，因为同编译型语言在运行之前编译成二进制代码不同，解释性语言在每一次运行都面对原始脚本的输入、解析、编译，然后执行
解决办法 OpCode 缓存：只有第一次需要解析和编译，而在后面的执行中，直接由脚本到 Opcode，从而实现了性能提速

二、PHP 作为动态类型语言的性能分析与改进
 PHP 语言是动态类型的语言，动态类型的语言本身由于涉及到在内存中的类型推断。语言的动态类型为开发者提供了方便，语言本身则会因为动态类型而降低效率
 解决办法就是将PHP转化为静态类型的表示，也就是做成扩展

 三、PHP 语言本身底层性能引擎提升
 第三个性能优化层面是语言本身的性能提升，每个版本的改进都有一定的优化

 PHP 性能的优化，还体现为要减少在运行中所消耗的资源
 所以 FastCGI 模式和 mod_php 的模式比传统的 CGI 模式也更为受欢迎。因为在传统的 CGI 模式中，在每一次脚本运行都需要加载所有的模块。而在程序运行完成了之后，也要释放模块资源
 而在 FastCGI 和 mod_php 模式中，则不需要如此。只有 php-fpm 或者 Apache 启动的时候，需要加载一次所有的模块，在具体的某次运行过程中，并不需要再次加载和释放相关的模块资源